# -*- coding: utf-8 -*-
"""Text_Categorization_BERT+_Improved.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ShahzebFarruk/ELG5902_Text_Cateorization/blob/main/Text_Categorization_BERT%2B_Improved.ipynb
"""

#from google.colab import files
#upload=files.upload()

!pip install transformers

import pandas as pd
df = pd.read_csv("mtsamples.csv")
df=df.drop("m",axis=1)
df.head()

df['medical_specialty'].value_counts()

df.dropna(
    axis=0,
    how='any',
    thresh=None,
    subset=None,
    inplace=True
)

data_categories  = df.groupby(df['medical_specialty'])
i = 1
print('===========Original Categories =======================')
for catName,dataCategory in data_categories:
    print('Cat:'+str(i)+' '+catName + ' : '+ str(len(dataCategory)) )
    i = i+1
print('==================================')

filtered_data_categories = data_categories.filter(lambda x:x.shape[0] > 270)
final_data_categories = filtered_data_categories.groupby(filtered_data_categories['medical_specialty'])
i=1
print('============Reduced Categories ======================')
for catName,dataCategory in final_data_categories:
    print('Cat:'+str(i)+' '+catName + ' : '+ str(len(dataCategory)) )
    i = i+1

print('============ Reduced Categories ======================')

filtered_data_categories

data = filtered_data_categories[['transcription', 'medical_specialty']]
data = data.drop(data[data['transcription'].isna()].index)
data.shape



data



import torch
from tqdm.notebook import tqdm
import pandas as pd

from transformers import BertTokenizer
from torch.utils.data import TensorDataset

from transformers import BertForSequenceClassification

df.head()

data['medical_specialty'].value_counts()

possible_labels = data.medical_specialty.unique()

label_dict = {}
for index, possible_label in enumerate(possible_labels):
    label_dict[possible_label] = index
label_dict

data['label'] = data.medical_specialty.replace(label_dict)

data

data

df

df=data

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(df.index.values, 
                                                  df.label.values, 
                                                  test_size=0.33, 
                                                  random_state=42, 
                                                  stratify=df.label.values)

df['data_type'] = ['not_set']*df.shape[0]

df.loc[X_train, 'data_type'] = 'train'
df.loc[X_val, 'data_type'] = 'val'

df.groupby(['medical_specialty', 'label', 'data_type']).count()

len(X_train)

#df=df.drop(['medical_specialty','sample_name','keywords','description'], axis=1)

df

import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet
from nltk.corpus import stopwords

stop_words = set(stopwords.words('english'))

lemmatizer = WordNetLemmatizer()

# function to convert nltk tag to wordnet tag
def nltk_tag_to_wordnet_tag(nltk_tag):
    if nltk_tag.startswith('J'):
        return wordnet.ADJ
    elif nltk_tag.startswith('V'):
        return wordnet.VERB
    elif nltk_tag.startswith('N'):
        return wordnet.NOUN
    elif nltk_tag.startswith('R'):
        return wordnet.ADV
    else:          
        return None

def lemmatize_sentence(sentence):
    #tokenize the sentence and find the POS tag for each token
    tokenizer_word= word_tokenize(str(sentence))
    filtered_sentence = ' '.join([w for w in tokenizer_word if not w in stop_words])
    nltk_tagged = nltk.pos_tag(nltk.word_tokenize(filtered_sentence))  
    #print(nltk_tagged)
    #tuple of (token, wordnet_tag)
    wordnet_tagged = map(lambda x: (x[0], nltk_tag_to_wordnet_tag(x[1])), nltk_tagged)
    lemmatized_sentence = []
    for word, tag in wordnet_tagged:
        if tag is None:
            #if there is no available tag, append the token as is
            lemmatized_sentence.append(word)
        else:        
            #else use the tag to lemmatize the token
            lemmatized_sentence.append(lemmatizer.lemmatize(word, tag).lower())
    return " ".join(lemmatized_sentence)

#X['Wordtoken_cleaned_txt']=X['description'].apply(lemmatize_sentence)
#X['description']=X['description'].apply(lemmatize_sentence)
#X['sample_name']=X['sample_name'].apply(lemmatize_sentence)
df['transcription']=df['transcription'].apply(lemmatize_sentence)

df["transcription"][3]

print(df["transcription"][3])

df["transcription"] = df["transcription"].str.replace(".,",". ").astype(str)
df["transcription"] = df["transcription"].str.replace(".,",". ").astype(str)

print(df["transcription"][7]+'\n')
print(df["transcription"][3])

df["transcription"] = df["transcription"].str.replace(" :. . ",": ").astype(str)

#df["transcription"] = df["transcription"].str.replace(",","").astype(str)
#df["transcription"] = df["transcription"].str.replace(",","").astype(str)



df_3=df['transcription'][11]

len(df_3)

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', 
                                          do_lower_case=True)
                                          
encoded_data_train = tokenizer.batch_encode_plus(
    df[df.data_type=='train'].transcription.values, 
    add_special_tokens=True, 
    return_attention_mask=True, 
    pad_to_max_length=True, 
    max_length=256, 
    return_tensors='pt'
)

encoded_data_val = tokenizer.batch_encode_plus(
    df[df.data_type=='val'].transcription.values, 
    add_special_tokens=True, 
    return_attention_mask=True, 
    pad_to_max_length=True, 
    max_length=256, 
    return_tensors='pt'
)


input_ids_train = encoded_data_train['input_ids']
attention_masks_train = encoded_data_train['attention_mask']
labels_train = torch.tensor(df[df.data_type=='train'].label.values)

input_ids_val = encoded_data_val['input_ids']
attention_masks_val = encoded_data_val['attention_mask']
labels_val = torch.tensor(df[df.data_type=='val'].label.values)

dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)
dataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)

input_ids_train[9]

#e_3

#len(e_3['input_ids'])

'''
for i in e_3['input_ids']:
  print(i)
e_3=encoded_data_train
'''

torch.set_printoptions(edgeitems=1)

input_ids_train.size()

attention_masks_train.size()

labels_train.size()

# Single segment input
single_seg_input = tokenizer.encode_plus("This is a sample input")

# Multiple segment input
multi_seg_input = tokenizer.encode_plus("This is segment A", "This is segment B")

print("Single segment token (str): {}".format(tokenizer.convert_ids_to_tokens(7233)))
#print("Single segment token (int): {}".format(e_3['input_ids'][0]))
#print("Single segment type       : {}".format(e_3['attention_mask'][0]))

# Segments are concatened in the input to the model, with 
##
#print("Multi segment token (str): {}".format(tokenizer.convert_ids_to_tokens(multi_seg_input['input_ids'])))
#print("Multi segment token (int): {}".format(multi_seg_input['input_ids']))
##print("Multi segment type       : {}".format(multi_seg_input['token_type_ids'])



df['transcription'][3]

model = BertForSequenceClassification.from_pretrained("bert-base-uncased",
                                                      num_labels=len(label_dict),
                                                      output_attentions=False,
                                                      output_hidden_states=False)

dataset_train

from torch.utils.data import DataLoader, RandomSampler, SequentialSampler

batch_size = 3

dataloader_train = DataLoader(dataset_train, 
                              sampler=RandomSampler(dataset_train), 
                              batch_size=batch_size)

dataloader_validation = DataLoader(dataset_val, 
                                   sampler=SequentialSampler(dataset_val), 
                                   batch_size=batch_size)

print(dataloader_train)

from transformers import AdamW, get_linear_schedule_with_warmup

optimizer = AdamW(model.parameters(),
                  lr=1e-5, 
                  eps=1e-8)
                  
epochs = 5

scheduler = get_linear_schedule_with_warmup(optimizer, 
                                            num_warmup_steps=0,
                                            num_training_steps=len(dataloader_train)*epochs)

from sklearn.metrics import f1_score

def f1_score_func(preds, labels):
    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return f1_score(labels_flat, preds_flat, average='weighted')

def accuracy_per_class(preds, labels):
    label_dict_inverse = {v: k for k, v in label_dict.items()}
    
    preds_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    w=[0,0,0,0,0,0,0,0]
    i=0

    for label in np.unique(labels_flat):
        y_preds = preds_flat[labels_flat==label]
        y_true = labels_flat[labels_flat==label]
        print(f'Class: {label_dict_inverse[label]}')
        print(f'Accuracy: {len(y_preds[y_preds==label])}/{len(y_true)}')
        q=len(y_preds[y_preds==label])
        e=len(y_true)
        w[i]=w[i]+q/e
        i=i+1
        print('Accuracy in % = '+ str(w[i-1]*100) + '%')
        print('\n')
    return w

#device='cpu'



import numpy as np
from tqdm.notebook import tqdm
import random

seed_val = 17
random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)
device = "cuda:0"
model = model.to(device)

def evaluate(dataloader_val):

    model.eval()
    
    loss_val_total = 0
    predictions, true_vals = [], []
    
    for batch in dataloader_val:
        
        batch = tuple(b.to(device) for b in batch)
        
        inputs = {'input_ids':      batch[0],
                  'attention_mask': batch[1],
                  'labels':         batch[2],
                 }

        with torch.no_grad():        
            outputs = model(**inputs)
            
        loss = outputs[0]
        logits = outputs[1]
        loss_val_total += loss.item()

        logits = logits.detach().cpu().numpy()
        label_ids = inputs['labels'].cpu().numpy()
        predictions.append(logits)
        true_vals.append(label_ids)
    
    loss_val_avg = loss_val_total/len(dataloader_val) 
    
    predictions = np.concatenate(predictions, axis=0)
    true_vals = np.concatenate(true_vals, axis=0)
            
    return loss_val_avg, predictions, true_vals

from google.colab import drive
drive.mount('/content/gdrive')
train_loss_list=[]
epoch_list=[]
val_loss_list=[]

for epoch in tqdm(range(1, epochs+1)):
    
    model.train()
    
    loss_train_total = 0

    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)
    for batch in progress_bar:

        model.zero_grad()
        
        batch = tuple(b.to(device) for b in batch)
        
        inputs = {'input_ids':      batch[0],
                  'attention_mask': batch[1],
                  'labels':         batch[2],
                 }       

        outputs = model(**inputs)
        
        loss = outputs[0]
        loss_train_total += loss.item()
        loss.backward()

        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

        optimizer.step()
        scheduler.step()
        
        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()/len(batch))})

        
    model_save_name = 'classifier_bert_improved.pt'
    path = F"/content/gdrive/My Drive/{model_save_name}" 
    torch.save(model.state_dict(), path)

    #torch.save(model.state_dict(), f'data_volume/finetuned_BERT_epoch_{epoch}.model')
        
    tqdm.write(f'\nEpoch {epoch}')
    
    loss_train_avg = loss_train_total/len(dataloader_train)            
    tqdm.write(f'Training loss: {loss_train_avg}')
    
    val_loss, predictions, true_vals = evaluate(dataloader_validation)
    val_f1 = f1_score_func(predictions, true_vals)
    tqdm.write(f'Validation loss: {val_loss}')
    tqdm.write(f'F1 Score (Weighted): {val_f1}')
    import matplotlib.pyplot as plt 
    train_loss_list.append(loss_train_avg)
    val_loss_list.append(val_loss)
    #fig, axs = plt.subplots(2, 1)
    
    epoch_list.append(epoch) 
    if epoch==5:
      plt.xlabel('Epoch') 
      # naming the y axis 
      plt.ylabel('Loss') 
  
      # giving a title to my graph 
      plt.title('Training Loss')
      plt.xlim(1,6)
      plot1 = plt.figure(1)
      plt.plot(epoch_list, train_loss_list ,label = "Training Loss")
      #if epoch>2:
      #  plt.show()
      #plt.xlim(1,6)
      plot2 = plt.figure(2) 
      plt.xlabel('Epoch') 
      plt.ylabel('Loss') 
  
      plt.title('Validation Loss')
      plt.plot(epoch_list, val_loss_list ,label = "Validation Loss")
      plt.xlim(1,6)
      #if epoch>2:
      #  plt.show()
    #if epoch>0:
    #  plt.show()

plt.title('Training and Validation Loss')
plt.xlim(1,6)
plt.plot(epoch_list, train_loss_list ,label = "Training Loss")
plt.plot(epoch_list, val_loss_list ,label = "Validation Loss")
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show

'''train_loss_list=[1,2,3]
epoch_list=[1,2,3]
val_loss_list=[9,5,3]

#train_loss_list.append(loss_train_avg)
#val_loss_list.append(val_loss)

plt.xlim(1,9)
plot1 = plt.figure(1)
plt.plot(epoch_list, train_loss_list ,label = "Training Loss")
plt.show()
#axs[1, 0].xlim(1,9)
#
plot2 = plt.figure(2) 
plt.plot(epoch_list, val_loss_list ,label = "Validation Loss")
plt.xlim(1,9)
plt.show()
#if epoch>0:
#  plt.show()
'''

'''
train_loss_list=[1,2,3]
epoch_list=[1,2,3]
val_loss_list=[1,2,3]

#train_loss_list.append(loss_train_avg)
#val_loss_list.append(val_loss)
fig, axs = plt.subplots(2, 1)
    
#epoch_list.append(epoch) 

axs[0, 0].plot(epoch_list, train_loss_list)
axs[0, 0].set_title('Training Loss Plot')
axs[1, 0].plot(epoch_list, val_loss_list , 'tab:orange')
axs[1, 0].set_title('Validation Loss Plot')
for ax in axs.flat:
  ax.set(xlabel='Epoch', ylabel='Loss')
'''

model_save_name = 'classifier_bert_improved.pt'
path = F"/content/gdrive/My Drive/{model_save_name}"
model.load_state_dict(torch.load(path))

model = BertForSequenceClassification.from_pretrained("bert-base-uncased",
                                                      num_labels=len(label_dict),
                                                      output_attentions=False,
                                                      output_hidden_states=False)

model.to(device)
model.load_state_dict(torch.load(path))
#model.load_state_dict(torch.load('data_volume/finetuned_BERT_epoch_1.model', map_location=torch.device('cpu')))

_, predictions, true_vals = evaluate(dataloader_validation)
Accuracy_score=accuracy_per_class(predictions, true_vals)

average_accuracy=0
for i in Accuracy_score:
  average_accuracy=average_accuracy+i
print('The average Accuracy Score for the Multi-Class Text Categorization for our BERT Model+ is '+ str(round(average_accuracy*100/5,2)) +' %')